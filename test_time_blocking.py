#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–æ—Ç–µ
"""

import sqlite3
from datetime import datetime, timedelta

def test_time_blocking():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('chillivili.db')
    cur = conn.cursor()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞
    test_date = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
    
    try:
        # 1. –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"1. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—Ç—ã {test_date}")
        cur.execute("DELETE FROM bookings WHERE date = ?", (test_date,))
        conn.commit()
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 6 —á–∞—Å–æ–≤
        print(f"2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ 6 —á–∞—Å–æ–≤")
        test_user_id = 1  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_time = "15:00"
        test_duration = 6
        test_guests = 2
        test_total_price = test_guests * test_duration * 500
        
        cur.execute(
            "INSERT INTO bookings (user_id, date, time, guests, duration, total_price, status, created_at) VALUES (?, ?, ?, ?, ?, ?, 'pending', ?)",
            (test_user_id, test_date, test_time, test_guests, test_duration, test_total_price, datetime.now().isoformat())
        )
        conn.commit()
        booking_id = cur.lastrowid
        print(f"   ‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ID={booking_id}")
        print(f"   üìä –î–µ—Ç–∞–ª–∏: {test_date} {test_time}, {test_duration}—á (–¥–æ {test_time[:2]}:{str(int(test_time[3:5]) + test_duration).zfill(2)})")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        print(f"3. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        cur.execute("SELECT time FROM time_slots ORDER BY time")
        all_times = [row[0] for row in cur.fetchall()]
        print(f"   üìã –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {len(all_times)}")
        print(f"   üìã –°–ª–æ—Ç—ã: {', '.join(all_times)}")
        
        # 4. –ü–æ–ª—É—á–∞–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        print(f"4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω")
        cur.execute("""
            SELECT time, duration FROM bookings 
            WHERE date = ? AND status != 'cancelled'
        """, (test_date,))
        existing_bookings = cur.fetchall()
        
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(existing_bookings)}")
        for booking in existing_bookings:
            print(f"      - {booking[0]} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {booking[1]}—á)")
        
        # 5. –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        print(f"5. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        blocked_times = set()
        
        for booking_time, booking_duration in existing_bookings:
            start_time = datetime.strptime(booking_time, '%H:%M')
            for i in range(booking_duration):
                blocked_time = start_time + timedelta(hours=i)
                blocked_times.add(blocked_time.strftime('%H:%M'))
        
        print(f"   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(blocked_times)}")
        print(f"   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {', '.join(sorted(blocked_times))}")
        
        # 6. –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        print(f"6. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        available_times = [time for time in all_times if time not in blocked_times]
        
        print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(available_times)}")
        print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(available_times)}")
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        print(f"7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        expected_blocked = ["15:00", "16:00", "17:00", "18:00", "19:00", "20:00"]
        actual_blocked = sorted(blocked_times)
        
        if actual_blocked == expected_blocked:
            print(f"   ‚úÖ –õ–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print(f"   ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {expected_blocked}")
            print(f"   ‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {actual_blocked}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!")
            print(f"   ‚ùå –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {expected_blocked}")
            print(f"   ‚ùå –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {actual_blocked}")
        
        # 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        print(f"8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        test_new_time = "16:00"
        test_new_duration = 2
        
        booking_start = datetime.strptime(test_new_time, '%H:%M')
        is_blocked = False
        
        for i in range(test_new_duration):
            check_time = booking_start + timedelta(hours=i)
            check_time_str = check_time.strftime('%H:%M')
            if check_time_str in blocked_times:
                is_blocked = True
                break
        
        if is_blocked:
            print(f"   ‚úÖ –í—Ä–µ–º—è {test_new_time} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: –≤—Ä–µ–º—è {test_new_time} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
        test_free_time = "21:00"
        test_free_duration = 2
        
        booking_start = datetime.strptime(test_free_time, '%H:%M')
        is_free = True
        
        for i in range(test_free_duration):
            check_time = booking_start + timedelta(hours=i)
            check_time_str = check_time.strftime('%H:%M')
            if check_time_str in blocked_times:
                is_free = False
                break
        
        if is_free:
            print(f"   ‚úÖ –í—Ä–µ–º—è {test_free_time} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: –≤—Ä–µ–º—è {test_free_time} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
        
        # 9. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"9. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        cur.execute("DELETE FROM bookings WHERE id = ?", (booking_id,))
        conn.commit()
        print(f"   üóëÔ∏è  –¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    test_time_blocking() 